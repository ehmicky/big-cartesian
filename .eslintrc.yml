extends: '@ehmicky/eslint-config/.eslintrc.yml'
overrides:
  - files: ['**/*.{ts,cts,mts}']
    rules:
      ## Comments
      '@typescript-eslint/ban-ts-comment': 2
      '@typescript-eslint/prefer-ts-expect-error': 2
      '@typescript-eslint/ban-tslint-comment': 2

      ## Declarations
      # Enforce declaring types of parameters.
      # Use type inference otherwise, including for callbacks (arrow functions).
      '@typescript-eslint/typedef':
        - 2
        - parameter: true
          propertyDeclaration: true
      '@typescript-eslint/no-inferrable-types': 2

      ## Assignments
      '@typescript-eslint/no-dynamic-delete': 2

      ## Naming
      '@typescript-eslint/naming-convention':
        - 2
        - selector: default
          # Variables of classes are titleized
          format: [camelCase, PascalCase]
          leadingUnderscore: forbid
          trailingUnderscore: forbid
        - selector: variable
          format: [camelCase, PascalCase, UPPER_CASE]
          leadingUnderscore: forbid
          trailingUnderscore: forbid
        - selector: typeLike
          format: [PascalCase]
          leadingUnderscore: forbid
          trailingUnderscore: forbid

      # ## Typecasting
      '@typescript-eslint/no-base-to-string': 2
      # `${...}` is useful in validation error messages where input might be
      # unknown or of many different types
      '@typescript-eslint/restrict-template-expressions': 0

      ## Tests
      '@typescript-eslint/no-unnecessary-boolean-literal-compare': 2
      '@typescript-eslint/no-unnecessary-condition':
        - 2
        - allowConstantLoopConditions: true
      '@typescript-eslint/strict-boolean-expressions': 2
      # Application-specific ordering is more relevant than type-specific
      '@typescript-eslint/sort-type-constituents': 0
      '@typescript-eslint/prefer-nullish-coalescing':
        - 2
        - ignoreTernaryTests: false
          ignoreConditionalTests: false
          ignoreMixedLogicalExpressions: false

      ## Structures
      '@typescript-eslint/prefer-for-of': 2
      '@typescript-eslint/no-for-in-array': 2

      ## Switch
      '@typescript-eslint/switch-exhaustiveness-check': 2

      ## Functions
      '@typescript-eslint/method-signature-style': 2
      '@typescript-eslint/prefer-function-type': 2
      # Prefer inferring return types instead
      '@typescript-eslint/explicit-function-return-type': 0
      '@typescript-eslint/explicit-module-boundary-types': 0
      '@typescript-eslint/adjacent-overload-signatures': 2
      # Overloading functions is a more readable alternative to generic types
      # in some cases
      '@typescript-eslint/unified-signatures': 0

      ## Objects
      '@typescript-eslint/consistent-type-definitions': 2
      '@typescript-eslint/consistent-indexed-object-style':
        - 2
        - index-signature
      '@typescript-eslint/no-empty-interface': 2
      # Application-specific ordering is more relevant than type-specific
      '@typescript-eslint/member-ordering': 0
      '@typescript-eslint/prefer-optional-chain': 2

      ## Classes
      '@typescript-eslint/unbound-method': 2
      '@typescript-eslint/no-this-alias': 2
      '@typescript-eslint/prefer-return-this-type': 2
      '@typescript-eslint/explicit-member-accessibility':
        - 2
        - accessibility: no-public
      '@typescript-eslint/prefer-readonly': 2
      '@typescript-eslint/class-literal-property-style':
        - 2
        - fields
      '@typescript-eslint/parameter-properties': 2
      '@typescript-eslint/no-unsafe-declaration-merging': 2
      '@typescript-eslint/no-extraneous-class':
        - 2
        - allowEmpty: true
          allowWithDecorator: true
          allowConstructorOnly: true
      '@typescript-eslint/no-misused-new': 2

      ## Arrays
      '@typescript-eslint/array-type': 2
      '@typescript-eslint/prefer-includes': 2
      '@typescript-eslint/prefer-reduce-type-parameter': 2
      '@typescript-eslint/require-array-sort-compare':
        - 2
        - ignoreStringArrays: true

      ## Strings
      '@typescript-eslint/restrict-plus-operands': 2
      '@typescript-eslint/prefer-string-starts-ends-with': 2

      ## RegExps
      '@typescript-eslint/prefer-regexp-exec': 2

      ## Async
      '@typescript-eslint/await-thenable': 2
      '@typescript-eslint/no-misused-promises': 2
      '@typescript-eslint/promise-function-async': 2
      '@typescript-eslint/no-floating-promises': 2

      ## Modules
      '@typescript-eslint/consistent-type-exports':
        - 2
        - fixMixedExportsWithInlineTypeSpecifier: true
      '@typescript-eslint/consistent-type-imports':
        - 2
        - fixStyle: inline-type-imports
      '@typescript-eslint/no-require-imports': 2
      '@typescript-eslint/no-var-requires': 2
      '@typescript-eslint/no-useless-empty-export': 2
      '@typescript-eslint/triple-slash-reference':
        - 2
        - lib: never
          path: never
          types: never

      ## Forbid
      '@typescript-eslint/ban-types':
        - 2
        - extendDefaults: true
          types:
            # `{}` is useful as `{ ... } & {}` is reduced to `{ ... }`, unlike
            # `{ ... } & object`
            '{}': false

      ## Type declaration
      # `type` is useful
      '@typescript-eslint/no-type-alias': 0
      '@typescript-eslint/no-redundant-type-constituents': 2

      ## Base types
      '@typescript-eslint/no-explicit-any':
        - 2
        - fixToUnknown: true
      '@typescript-eslint/no-unsafe-assignment': 2
      '@typescript-eslint/no-unsafe-member-access': 2
      '@typescript-eslint/no-unsafe-argument': 2
      '@typescript-eslint/no-unsafe-call': 2
      '@typescript-eslint/no-unsafe-return': 2

      ## Undefined/null/void
      # `value!` assertions are useful, e.g. when accessing an array element
      # that we know is not out-of-bound
      '@typescript-eslint/no-non-null-assertion': 0
      '@typescript-eslint/non-nullable-type-assertion-style': 2
      '@typescript-eslint/no-confusing-non-null-assertion': 2
      '@typescript-eslint/no-extra-non-null-assertion': 2
      '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 2
      '@typescript-eslint/no-non-null-asserted-optional-chain': 2
      '@typescript-eslint/no-invalid-void-type':
        - 2
        - allowAsThisParameter: true
      '@typescript-eslint/no-confusing-void-expression':
        - 2
        - ignoreArrowShorthand: true
          ignoreVoidOperator: true
      '@typescript-eslint/no-meaningless-void-operator': 2

      ## Enums
      '@typescript-eslint/prefer-enum-initializers': 2
      '@typescript-eslint/prefer-literal-enum-member': 2
      '@typescript-eslint/no-duplicate-enum-values': 2
      '@typescript-eslint/no-unnecessary-qualifier': 2

      ## Readonly
      '@typescript-eslint/prefer-as-const': 2
      # This rule seems to be buggy and produce false positives
      '@typescript-eslint/prefer-readonly-parameter-types': 0

      ## Generic
      '@typescript-eslint/consistent-generic-constructors': 2
      '@typescript-eslint/no-unnecessary-type-arguments': 2
      '@typescript-eslint/no-unnecessary-type-constraint': 2

      ## Type assertions
      '@typescript-eslint/consistent-type-assertions': 2
      '@typescript-eslint/no-unnecessary-type-assertion': 2

      ## Namespaces
      '@typescript-eslint/no-namespace':
        - 2
        - allowDefinitionFiles: false
      '@typescript-eslint/prefer-namespace-keyword': 2

  - files: ['**/*.test-d.ts']
    rules:
      # @ts-expect-error is useful in type tests
      '@typescript-eslint/ban-ts-comment':
        - 2
        - ts-expect-error: 0

      # Allow using `expectType<void>(...)`
      '@typescript-eslint/no-invalid-void-type': 0
      '@typescript-eslint/no-confusing-void-expression': 0

  - files: ['**/*.md/*.ts']
    parserOptions:
      project: null
    rules:
      '@typescript-eslint/await-thenable': 0
      '@typescript-eslint/consistent-type-exports': 0
      '@typescript-eslint/dot-notation': 0
      '@typescript-eslint/naming-convention': 0
      '@typescript-eslint/no-base-to-string': 0
      '@typescript-eslint/no-confusing-void-expression': 0
      '@typescript-eslint/no-floating-promises': 0
      '@typescript-eslint/no-for-in-array': 0
      '@typescript-eslint/no-implied-eval': 0
      '@typescript-eslint/no-meaningless-void-operator': 0
      '@typescript-eslint/no-misused-promises': 0
      '@typescript-eslint/non-nullable-type-assertion-style': 0
      '@typescript-eslint/no-redundant-type-constituents': 0
      '@typescript-eslint/no-throw-literal': 0
      '@typescript-eslint/no-unnecessary-boolean-literal-compare': 0
      '@typescript-eslint/no-unnecessary-condition': 0
      '@typescript-eslint/no-unnecessary-qualifier': 0
      '@typescript-eslint/no-unnecessary-type-arguments': 0
      '@typescript-eslint/no-unnecessary-type-assertion': 0
      '@typescript-eslint/no-unsafe-argument': 0
      '@typescript-eslint/no-unsafe-assignment': 0
      '@typescript-eslint/no-unsafe-call': 0
      '@typescript-eslint/no-unsafe-member-access': 0
      '@typescript-eslint/no-unsafe-return': 0
      '@typescript-eslint/prefer-includes': 0
      '@typescript-eslint/prefer-nullish-coalescing': 0
      '@typescript-eslint/prefer-readonly': 0
      '@typescript-eslint/prefer-readonly-parameter-types': 0
      '@typescript-eslint/prefer-reduce-type-parameter': 0
      '@typescript-eslint/prefer-regexp-exec': 0
      '@typescript-eslint/prefer-return-this-type': 0
      '@typescript-eslint/prefer-string-starts-ends-with': 0
      '@typescript-eslint/promise-function-async': 0
      '@typescript-eslint/require-array-sort-compare': 0
      '@typescript-eslint/require-await': 0
      '@typescript-eslint/restrict-plus-operands': 0
      '@typescript-eslint/restrict-template-expressions': 0
      '@typescript-eslint/return-await': 0
      '@typescript-eslint/strict-boolean-expressions': 0
      '@typescript-eslint/switch-exhaustiveness-check': 0
      '@typescript-eslint/unbound-method': 0

  - files: ['examples/**/*.ts']
    rules:
      # Examples sometimes used unused variables
      '@typescript-eslint/no-unused-vars': 0

      # Examples might be using `any`
      '@typescript-eslint/no-unsafe-assignment': 0
      '@typescript-eslint/no-unsafe-member-access': 0
      '@typescript-eslint/no-unsafe-argument': 0
      '@typescript-eslint/no-unsafe-call': 0
      '@typescript-eslint/no-unsafe-return': 0
